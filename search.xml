<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis-批量操作（基于Mysql）</title>
      <link href="2021/06/15/Mybatis-%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C/"/>
      <url>2021/06/15/Mybatis-%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在url中添加 rewriteBatchedStatements=true&amp;allowMultiQueries=true 参数</p></li><li><p>批量添加 采用 foreach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertBatch</span><span class="params">(<span class="meta">@Param(&quot;list&quot;)</span>List&lt;User&gt; list)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;insert id=<span class="string">&quot;insertBatch&quot;</span>&gt;</span><br><span class="line"><span class="function">insert into <span class="title">user</span> <span class="params">(ID,name)</span></span></span><br><span class="line"><span class="function">        values</span></span><br><span class="line"><span class="function">        &lt;foreach collection</span>=<span class="string">&quot;list&quot;</span> item=<span class="string">&quot;item&quot;</span> index=<span class="string">&quot;index&quot;</span> separator=<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">            (#&#123;item.id,jdbcType=VARCHAR&#125;, #&#123;item.name,jdbcType=VARCHAR&#125;)</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure></li><li><p>批量更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateBatch</span><span class="params">(<span class="meta">@Param(&quot;list&quot;)</span> List&lt;User&gt; list)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;update id=<span class="string">&quot;updateBatch&quot;</span>&gt;</span><br><span class="line">        &lt;foreach collection=<span class="string">&quot;list&quot;</span> item=<span class="string">&quot;item&quot;</span> index=<span class="string">&quot;index&quot;</span> open=<span class="string">&quot;&quot;</span> close=<span class="string">&quot;&quot;</span> separator=<span class="string">&quot;;&quot;</span>&gt;</span><br><span class="line">            update user</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;<span class="keyword">if</span> test=<span class="string">&quot;item.name != null&quot;</span>&gt;</span><br><span class="line">                    name = #&#123;item.name,jdbcType=VARCHAR&#125;,</span><br><span class="line">                &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">            where ID = #&#123;item.id,jdbcType=VARCHAR&#125;</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></li><li><p>批量查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;String&gt; ids)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;getAll&quot;</span> resultType=<span class="string">&quot;com.ywl.user&quot;</span>&gt;</span><br><span class="line">        select id,</span><br><span class="line">        name</span><br><span class="line">        from user</span><br><span class="line">        where id in</span><br><span class="line">        &lt;foreach item=<span class="string">&quot;item&quot;</span> index=<span class="string">&quot;index&quot;</span> collection=<span class="string">&quot;ids&quot;</span> open=<span class="string">&quot;(&quot;</span> separator=<span class="string">&quot;,&quot;</span> close=<span class="string">&quot;)&quot;</span>&gt;</span><br><span class="line">            #&#123;item&#125;</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/12/hello-world/"/>
      <url>2021/05/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span> text</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA配置Docker</title>
      <link href="2021/04/08/IDEA%E9%85%8D%E7%BD%AEDocker/"/>
      <url>2021/04/08/IDEA%E9%85%8D%E7%BD%AEDocker/</url>
      
        <content type="html"><![CDATA[<ol><li><p>配置Docker，运行远程连接</p><ul><li>编辑服务器中文件：/lib/systemd/system/docker.service</li><li>找到 ExecStart=/usr/bin/dockerd -H fd:// –containerd=/run/containerd/containerd.sock</li><li>修改为：ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</li><li>重新加载并重启docker：systemctl daemon-reload &amp;&amp; systemctl restart docker</li></ul></li><li><p>IDEA 连接远程Docker服务</p><ul><li><p>在设置页面，按照下图的数字顺序创建一个Docker server并进行设置，其中”192.168.31.173:2375”是Docker服务所在机器的IP地址，如果连接成功页面上会立即提示”Connection successful”：</p><p><img src="https://gitee.com/JinWeiYang/pic-go/raw/master/img/image-20210401172803431.png" alt="image-20210401172803431"></p></li></ul></li><li><p>创建一个简单的springboot应用，在pom文件中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> 1.&lt;properties&gt;</span><br><span class="line">       &lt;docker.image.prefix&gt;test&lt;/docker.image.prefix&gt;</span><br><span class="line">   &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">2.&lt;build&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">               &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">               &lt;executions&gt;</span><br><span class="line">                   &lt;execution&gt;</span><br><span class="line">                       &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                       &lt;goals&gt;</span><br><span class="line">                           &lt;goal&gt;repackage&lt;/goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;</span><br><span class="line">                       &lt;/goals&gt;</span><br><span class="line">                   &lt;/execution&gt;</span><br><span class="line">               &lt;/executions&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">               &lt;version&gt;1.4.3&lt;/version&gt;</span><br><span class="line">               &lt;executions&gt;</span><br><span class="line">                   &lt;execution&gt;</span><br><span class="line">                       &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">                       &lt;goals&gt;</span><br><span class="line">                           &lt;goal&gt;build&lt;/goal&gt;</span><br><span class="line">                           &lt;goal&gt;push&lt;/goal&gt;</span><br><span class="line">                       &lt;/goals&gt;</span><br><span class="line">                   &lt;/execution&gt;</span><br><span class="line">               &lt;/executions&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">                   &lt;repository&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/repository&gt;</span><br><span class="line">                   &lt;tag&gt;$&#123;project.version&#125;&lt;/tag&gt;</span><br><span class="line">                   &lt;buildArgs&gt;</span><br><span class="line">                       &lt;JAR_FILE&gt;$&#123;project.build.finalName&#125;.jar&lt;/JAR_FILE&gt;</span><br><span class="line">                   &lt;/buildArgs&gt;</span><br><span class="line">               &lt;/configuration&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">       &lt;/plugins&gt;</span><br><span class="line">   &lt;/build&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Generator使用</title>
      <link href="2021/03/23/Mybatis-Generator%E4%BD%BF%E7%94%A8/"/>
      <url>2021/03/23/Mybatis-Generator%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="pom-xml-文件配置"><a href="#pom-xml-文件配置" class="headerlink" title="pom.xml 文件配置"></a>pom.xml 文件配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">                   &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                   &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                   &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">               &lt;/configuration&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">           &lt;!--  添加Mybatis-generator插件--&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">               &lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class="line">               &lt;dependencies&gt;</span><br><span class="line">                   &lt;!--要操作的数据库--&gt;</span><br><span class="line">                   &lt;dependency&gt;</span><br><span class="line">                       &lt;groupId&gt;org.postgresql&lt;/groupId&gt;</span><br><span class="line">                       &lt;artifactId&gt;postgresql&lt;/artifactId&gt;</span><br><span class="line">                       &lt;version&gt;42.1.1&lt;/version&gt;</span><br><span class="line">                   &lt;/dependency&gt;</span><br><span class="line">               &lt;/dependencies&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">                   &lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/mybatis-generator/generatorConfig.xml</span><br><span class="line">                   &lt;/configurationFile&gt;</span><br><span class="line">                   &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">                   &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">               &lt;/configuration&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">       &lt;/plugins&gt;</span><br><span class="line">   &lt;/build&gt;</span><br></pre></td></tr></table></figure><h1 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h1><h2 id="generator-properties-放置-resources-mybatis-generator目录下"><a href="#generator-properties-放置-resources-mybatis-generator目录下" class="headerlink" title="generator.properties(放置 resources/mybatis-generator目录下)"></a>generator.properties(放置 resources/mybatis-generator目录下)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=org.postgresql.Driver</span><br><span class="line">url=jdbc:postgresql://localhost:55432/cmsdb?currentSchema=ac_schema</span><br><span class="line">username=root</span><br><span class="line">password=123456</span><br></pre></td></tr></table></figure><h1 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h1><h2 id="generatorConfig-xml-放置-resources-mybatis-generator目录下"><a href="#generatorConfig-xml-放置-resources-mybatis-generator目录下" class="headerlink" title="generatorConfig.xml(放置 resources/mybatis-generator目录下)"></a>generatorConfig.xml(放置 resources/mybatis-generator目录下)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!--    数据库配置信息--&gt;</span><br><span class="line">    &lt;properties resource=&quot;mybatis-generator/generator.properties&quot;/&gt;</span><br><span class="line">    &lt;!--    注释掉--&gt;</span><br><span class="line">    &lt;!--    &lt;classPathEntry location=&quot;$&#123;driverLocation&#125;&quot;/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库连接参数 --&gt;</span><br><span class="line">        &lt;jdbcConnection</span><br><span class="line">                driverClass=&quot;$&#123;driverClassName&#125;&quot;</span><br><span class="line">                connectionURL=&quot;$&#123;url&#125;&quot;</span><br><span class="line">                userId=&quot;$&#123;username&#125;&quot;</span><br><span class="line">                password=&quot;$&#123;password&#125;&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 实体类的包名和存放路径 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.example.demo.domain&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;!-- 是否允许子包 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">            &lt;!-- 是否对modal添加构造函数 --&gt;</span><br><span class="line">            &lt;property name=&quot;constructorBased&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 --&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!-- 建立modal对象是否不可改变 即生成的modal对象不会有setter方法，只有构造方法 --&gt;</span><br><span class="line">            &lt;property name=&quot;immutable&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 生成映射文件*.xml的位置--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot; targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 生成DAO的包名和位置 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.example.demo.mapper&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- tableName：数据库中的表名或视图名；domainObjectName：生成的实体类的类名--&gt;</span><br><span class="line">        &lt;table tableName=&quot;ac_role&quot; domainObjectName=&quot;Book12&quot;</span><br><span class="line">               enableCountByExample=&quot;false&quot;</span><br><span class="line">               enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot;</span><br><span class="line">               enableSelectByExample=&quot;false&quot;</span><br><span class="line">               selectByExampleQueryId=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>you-get</title>
      <link href="2021/03/15/you-get/"/>
      <url>2021/03/15/you-get/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装pip3</p><p>sudo apt-get install python3-pip</p></li><li><p>安装you-get</p><p>sudo pip3 install you-get</p></li><li><p>更新</p><p>pip3 install –upgrade you-get</p></li><li><p>使用</p><p>you-get [url] #一般情况下用这一个命令就够了,使用最简单,而且下载的是最高质量</p><p>仅查看视频格式</p><p>you-get -i [url]</p><p>批量下载</p><p>you-get -o 保存路径 [url] -l</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Redis</title>
      <link href="2021/03/03/Docker%E5%AE%89%E8%A3%85Redis/"/>
      <url>2021/03/03/Docker%E5%AE%89%E8%A3%85Redis/</url>
      
        <content type="html"><![CDATA[<ol><li>安装制定版本<ol><li>docker pull redis:6.0.9</li></ol></li><li>启动<ol><li>docker run -p 6379:6379 –name redis -v /home/ywl/Software/develop/redis/redis.conf:/etc/redis/redis.conf -v /home/ywl/Software/develop/redis/data:/data -d redis:6.0.9 redis-server /etc/redis/redis.conf<ul><li>-p 6379:6379 端口映射：前表示主机部分，：后表示容器部分。</li><li>–name myredis 指定该容器名称，查看和进行操作都比较方便。</li><li>-v 挂载目录，规则与端口映射相同</li><li>-d redis:6.0.9 表示后台启动redis,并指定版本</li><li>redis-server /etc/redis/redis.conf 以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/usr/local/docker/redis.conf</li></ul></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装MySQL</title>
      <link href="2021/03/03/Docker%E5%AE%89%E8%A3%85MySQL/"/>
      <url>2021/03/03/Docker%E5%AE%89%E8%A3%85MySQL/</url>
      
        <content type="html"><![CDATA[<ol><li><p>查找mysql 指定版本，默认最新</p><ul><li>docker pull mysql:5.7 </li></ul></li><li><p>启动mysql</p><ul><li>docker run -itd –name mysql57 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7<ul><li>后边指定要启动mysql的版本，不指定会默认启动最新版 mysql，如果没有最新版，则会下载</li></ul></li></ul></li><li><p>进入mysql</p><ul><li>docker exec -it b9f1d7dd70df /bin/bash<ul><li>b9f1d7dd70df：docker ps 命令 获取的 CONTAINER ID</li></ul></li></ul></li><li><p>登陆 mysql</p><ul><li>mysql -u root -p</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="2021/03/03/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/03/03/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</p><p>build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</p><p>commit    Create a new image from a container changes   # 提交当前容器为新的镜像</p><p>cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</p><p>create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</p><p>diff      Inspect changes on a container’s filesystem   # 查看 docker 容器变化</p><p>events    Get real time events from the server          # 从 docker 服务获取容器实时事件</p><p>exec      Run a command in an existing container        # 在已存在的容器上运行命令</p><p>export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</p><p>history   Show the history of an image                  # 展示一个镜像形成历史</p><p>images    List images                                   # 列出系统当前镜像</p><p>import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</p><p>info      Display system-wide information               # 显示系统相关信息</p><p>inspect   Return low-level information on a container   # 查看容器详细信息</p><p>kill      Kill a running container                      # kill 指定 docker 容器</p><p>load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</p><p>login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</p><p>logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</p><p>logs      Fetch the logs of a container                 # 输出当前容器日志信息</p><p>port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</p><p>pause     Pause all processes within a container        # 暂停容器</p><p>ps        List containers                               # 列出容器列表</p><p>pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</p><p>push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</p><p>restart   Restart a running container                   # 重启运行的容器</p><p>rm        Remove one or more containers                 # 移除一个或者多个容器</p><p>rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</p><p>run       Run a command in a new container              # 创建一个新的容器并运行一个命令</p><p>save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</p><p>search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</p><p>start     Start a stopped containers                    # 启动容器</p><p>stop      Stop a running containers                     # 停止容器</p><p>tag       Tag an image into a repository                # 给源中镜像打标签</p><p>top       Lookup the running processes of a container   # 查看容器中运行的进程信息</p><p>unpause   Unpause a paused container                    # 取消暂停容器</p><p>version   Show the docker version information           # 查看 docker 版本号</p><p>wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="2021/03/03/Docker/"/>
      <url>2021/03/03/Docker/</url>
      
        <content type="html"><![CDATA[<ul><li>查看所有容器：</li></ul><p>docker ps</p><ul><li>停止容器</li></ul><p>docker stop &lt;容器 ID&gt;</p><ul><li>删除images</li></ul><p>docker rmi IMAGE_ID/REPOSITORY</p><ul><li>删除镜像</li></ul><p>docker rmi -f 镜像id</p><p>docker rmi -f 镜像1 镜像2</p><ul><li>启动时设置别名</li></ul><p>docker run -it –name mycentos centos</p><ul><li>后台启动容器</li></ul><p>docker run -d 容器名称</p><ul><li>退出容器：</li></ul><p>1、exit</p><p>2、ctrl+P+Q 退出容器，但不关闭</p><p>2、1 进入退出的容器</p><p>docker attach 容器id</p><p>2.2 进入退出的容器，并执行命令</p><p>2.2.1</p><p>docker exec -it 容器id 要执行的命令</p><p>eg：docker exec -it 34a3a5369add ls -l /tmp</p><p>2.2.2 进入容器</p><p>docker exec -it 容器id /bin/bash</p><ul><li>启动容器</li></ul><p>docker start 容器id或容器名称</p><ul><li>重启容器</li></ul><p>docker restart 容器id或容器名称</p><ul><li>停止容器</li></ul><p>1、docker stop 容器id</p><p>2、docker kill 容器id （强制关闭）</p><ul><li>查看启动过的容器</li></ul><p>docker ps -n 数量</p><ul><li>删除以停止的容器</li></ul><p>docker rm 容器id</p><ul><li>查看容器日志</li></ul><p>docker logs -t -f –tail 3 容器id</p><ul><li>查看容器内运行的进程</li></ul><p>docker top 容器id</p><ul><li>将容器内的数据，拷贝出来</li></ul><p>docker cp 容器id:容器数据路径 放置的路径</p><p>eg：docker cp 34a3a5369add:/tmp/yum.log C:\users\pp\Desktop</p><p>docker 打包容器 </p><p>commit：docker commit -m=”提交得信息” -a=”作者” 容器id 要创建的目标镜像名称:[标签]</p><p>eg:</p><p>docker commit -a=”ywl” -m=”ceshi tomcat without docs” 6ae6bbf40b87 qq/tomcat:0.1</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 8 Stream</title>
      <link href="2021/03/03/Java-8-Stream/"/>
      <url>2021/03/03/Java-8-Stream/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载：<a href="https://mp.weixin.qq.com/s/k1Rjqpl4dgDdqhpvqKgdEg">https://mp.weixin.qq.com/s/k1Rjqpl4dgDdqhpvqKgdEg</a></p></blockquote><p><img src="https://gitee.com/JinWeiYang/pic-go/raw/master/img/image-20210303111309238.png" alt="image-20210303111309238"></p><ol><li><p>实体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> public class Person &#123;</span><br><span class="line">     private String name;  // 姓名</span><br><span class="line">     private int salary; // 薪资</span><br><span class="line">     private int age; // 年龄</span><br><span class="line">     private String sex; //性别</span><br><span class="line">     private String area;  // 地区</span><br><span class="line">     private Date date;  // 日期</span><br><span class="line"> </span><br><span class="line">     public Person(String name, int salary, int age, String sex, String area) &#123;</span><br><span class="line">         this.name = name;</span><br><span class="line">         this.salary = salary;</span><br><span class="line">         this.age = age;</span><br><span class="line">         this.sex = sex;</span><br><span class="line">         this.area = area;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public Person(String name, int salary, int age, String sex, String area, Date date) &#123;</span><br><span class="line">         this.name = name;</span><br><span class="line">         this.salary = salary;</span><br><span class="line">         this.age = age;</span><br><span class="line">         this.sex = sex;</span><br><span class="line">         this.area = area;</span><br><span class="line">         this.date = date;</span><br><span class="line">     &#125;</span><br><span class="line"> ... get/set/toString 省略 ...</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">  // 遍历 递归使用</span><br><span class="line">public class Menu &#123;</span><br><span class="line">    public int id;</span><br><span class="line">    /**</span><br><span class="line">     * 名称</span><br><span class="line">     */</span><br><span class="line">    public String name;</span><br><span class="line">    /**</span><br><span class="line">     * 父id ，根节点为0</span><br><span class="line">     */</span><br><span class="line">    public int parentId;</span><br><span class="line">    /**</span><br><span class="line">     * 子节点信息</span><br><span class="line">     */</span><br><span class="line">    public List&lt;Menu&gt; childList;</span><br><span class="line">   </span><br><span class="line">    public Menu(int id, String name, int parentId) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line">... get/set/toString 省略 ...</span><br><span class="line">&#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure></li><li><p>示例</p><ol><li><p>遍历(匹配)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void test1() &#123;</span><br><span class="line">       List&lt;Integer&gt; list = Arrays.asList(7, 6, 9, 3, 8, 2, 1);</span><br><span class="line">    // 遍历输出符合条件的元素</span><br><span class="line">    // 匹配第一个</span><br><span class="line">       Optional&lt;Integer&gt; first = list.stream().filter(x -&gt; x &gt; 7).findFirst();</span><br><span class="line">    // 匹配任意（适用于并行流）</span><br><span class="line">       Optional&lt;Integer&gt; any = list.parallelStream().filter(x -&gt; x &gt; 7).findAny();</span><br><span class="line">    // 是否包含符合特定条件的元素</span><br><span class="line">       boolean b = list.stream().anyMatch(x -&gt; x &lt; 7);</span><br><span class="line">       System.out.println(b);</span><br><span class="line">       </span><br><span class="line">       boolean anyMatch = list.stream().anyMatch(x -&gt; x &lt; 6);</span><br><span class="line">       System.out.println(&quot;匹配第一个值：&quot; + findFirst.get());</span><br><span class="line">       System.out.println(&quot;匹配任意一个值：&quot; + findAny.get());</span><br><span class="line">       System.out.println(&quot;是否存在大于6的值：&quot; + anyMatch);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>筛选(遍历)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void test2() &#123;</span><br><span class="line">     List&lt;Integer&gt; list = Arrays.asList(6, 7, 3, 8, 1, 2, 9);</span><br><span class="line">     list.stream().filter(x -&gt; x &gt; 7).map(y -&gt; y + 1).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">void test3() &#123;</span><br><span class="line">     List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">     personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">     personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">     personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">     personList.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">     personList.add(new Person(&quot;Owen&quot;, 9500, 25, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">     personList.add(new Person(&quot;Alisa&quot;, 7900, 26, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">      </span><br><span class="line">    //获取员工 年龄 大于 24 的姓名</span><br><span class="line">    List&lt;String&gt; collect = personList.parallelStream()</span><br><span class="line">    .filter(x -&gt; x.getAge() &gt; 24)</span><br><span class="line">    .map(p -&gt; p.getName())</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>筛选（统计)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void test7() &#123;</span><br><span class="line">     List&lt;Integer&gt; list = Arrays.asList(7, 6, 4, 8, 2, 11, 9);</span><br><span class="line">     long count = list.stream().filter(x -&gt; x &lt; 6).count();</span><br><span class="line">     System.out.println(&quot;list中大于6的元素个数：&quot; + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>聚合（String中最长元素）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void test4() &#123;</span><br><span class="line">     List&lt;String&gt; list = Arrays.asList(&quot;adnm&quot;, &quot;admmt&quot;, &quot;pot&quot;, &quot;xbangd&quot;, &quot;weoujgsd&quot;);</span><br><span class="line">      </span><br><span class="line">     Optional&lt;String&gt; max = list.stream().max(Comparator.comparing(String::length));</span><br><span class="line">     System.out.println(&quot;最长的字符串：&quot; + max.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>聚合（最大/最小）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> @Test</span><br><span class="line"> void test6() throws ParseException &#123;</span><br><span class="line">      List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">      personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;, new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2020-02-01&quot;)));</span><br><span class="line">      personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;, new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2020-02-02&quot;)));</span><br><span class="line">      personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;, new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2020-02-04&quot;)));</span><br><span class="line">      personList.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;, new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2020-01-01&quot;)));</span><br><span class="line">      personList.add(new Person(&quot;Owen&quot;, 9500, 25, &quot;male&quot;, &quot;New York&quot;, new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2021-02-01&quot;)));</span><br><span class="line">      personList.add(new Person(&quot;Alisa&quot;, 7900, 26, &quot;female&quot;, &quot;New York&quot;, new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2020-02-11&quot;)));</span><br><span class="line">      </span><br><span class="line">      String name = personList.stream().max(Comparator.comparingInt(Person::getAge)).get().getName();</span><br><span class="line">      System.out.println(name);</span><br><span class="line">      String name1 = personList.stream().min(Comparator.comparing(Person::getDate)).get().getName();</span><br><span class="line">      System.out.println(name1);</span><br><span class="line">      Optional&lt;Person&gt; max = personList.stream().max(Comparator.comparingInt(Person::getSalary));</span><br><span class="line">      System.out.println(&quot;员工工资最大值：&quot; + max.get().getSalary());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void test5() &#123;</span><br><span class="line">     List&lt;Integer&gt; list = Arrays.asList(7, 6, 9, 4, 11, 6);</span><br><span class="line">     // 自然排序</span><br><span class="line">     Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);</span><br><span class="line">     // 自定义排序</span><br><span class="line">     Optional&lt;Integer&gt; max2 = list.stream().max(new Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">              return o1.compareTo(o2);</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     System.out.println(&quot;自然排序的最大值：&quot; + max.get());</span><br><span class="line">     System.out.println(&quot;自定义排序的最大值：&quot; + max2.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 排序：</span><br><span class="line"> * sorted，中间操作。有两种排序：</span><br><span class="line"> * sorted()：自然排序，流中元素需实现Comparable接口</span><br><span class="line"> * sorted(Comparator com)：Comparator排序器自定义排序</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test17() &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">      </span><br><span class="line">    personList.add(new Person(&quot;Sherry&quot;, 9010, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Tom&quot;, 8900, 22, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Jack&quot;, 9010, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Lily&quot;, 8800, 26, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Alisa&quot;, 9000, 26, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">      </span><br><span class="line">    List&lt;String&gt; names = personList.stream()</span><br><span class="line">    .sorted(Comparator.comparing(Person::getSalary))</span><br><span class="line">    .map(m -&gt; m.getName())</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">    System.out.println(&quot;正序: &quot; + names);</span><br><span class="line">      </span><br><span class="line">    List&lt;String&gt; collect = personList.stream()</span><br><span class="line">    .sorted(Comparator.comparing(Person::getSalary).reversed())</span><br><span class="line">    .map(Person::getName)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">    System.out.println(&quot;倒序: &quot; + collect);</span><br><span class="line">      </span><br><span class="line">    List&lt;String&gt; collectName = personList.stream()</span><br><span class="line">    .sorted(Comparator.comparing(Person::getSalary).thenComparing(Person::getAge).reversed())</span><br><span class="line">    .map(Person::getName)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">    System.out.println(&quot;先按照工资，在按照年龄: &quot; + collectName);</span><br><span class="line">      </span><br><span class="line">    // 先按工资再按年龄自定义排序（从大到小）</span><br><span class="line">    List&lt;String&gt; newList4 = personList.stream().sorted((p1, p2) -&gt; &#123;</span><br><span class="line">    if (p1.getSalary() == p2.getSalary()) &#123;</span><br><span class="line">        return p2.getAge() - p1.getAge();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        return p2.getSalary() - p1.getSalary();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).map(Person::getName).collect(Collectors.toList());</span><br><span class="line">    System.out.println(newList4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void test8() &#123;</span><br><span class="line">     String[] strArr = &#123;&quot;abcd&quot;, &quot;bcdd&quot;, &quot;defde&quot;, &quot;fTr&quot;&#125;;</span><br><span class="line">     List&lt;String&gt; strList = Arrays.stream(strArr).map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">     List&lt;Integer&gt; intList = Arrays.asList(1, 3, 5, 7, 9, 11);</span><br><span class="line">     List&lt;Integer&gt; intListNew = intList.stream().map(x -&gt; x + 3).collect(Collectors.toList());</span><br><span class="line">     List&lt;Integer&gt; collect = intList.stream().filter(x -&gt; x &gt; 5).map(y -&gt; y + 3).collect(Collectors.toList());</span><br><span class="line">     System.out.println(collect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">void test9() &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Owen&quot;, 9500, 25, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Alisa&quot;, 7900, 26, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">      </span><br><span class="line">    // 不改变原来员工集合的方式</span><br><span class="line">    List&lt;Person&gt; personListNew = personList.stream().map(person -&gt; &#123;</span><br><span class="line">    Person personNew = new Person(person.getName(), 0, 0, null, null);</span><br><span class="line">        personNew.setSalary(person.getSalary() + 10000);</span><br><span class="line">        return personNew;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    System.out.println(&quot;一次改动前：&quot; + personList.get(0).getName() + &quot;--&gt;&quot; + personList.get(0).getSalary());</span><br><span class="line">    System.out.println(&quot;一次改动后：&quot; + personListNew.get(0).getName() + &quot;--&gt;&quot; + personListNew.get(0).getSalary());  </span><br><span class="line">      </span><br><span class="line">    // 改变原来员工集合的方式</span><br><span class="line">    List&lt;Person&gt; personListNew2 = personList.stream().map(person -&gt; &#123;</span><br><span class="line">    person.setSalary(person.getSalary() + 10000);</span><br><span class="line">        return person;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">System.out.println(&quot;二次改动前：&quot; + personList.get(0).getName() + &quot;--&gt;&quot; + personListNew.get(0).getSalary());</span><br><span class="line">    System.out.println(&quot;二次改动后：&quot; + personListNew2.get(0).getName() + &quot;--&gt;&quot; + personListNew.get(0).getSalary());</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">@Test</span><br><span class="line">void test10() &#123;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(&quot;m,k,l,a&quot;, &quot;1,3,5,7&quot;);</span><br><span class="line">    List&lt;String&gt; listNew = list.stream().flatMap(s -&gt; &#123;</span><br><span class="line">    // 将每个元素转换成一个stream</span><br><span class="line">        String[] split = s.split(&quot;,&quot;);</span><br><span class="line">        Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line">        return s2;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    System.out.println(&quot;处理前的集合：&quot; + list);</span><br><span class="line">    System.out.println(&quot;处理后的集合：&quot; + listNew);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>归约</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void test11() &#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(1, 3, 2, 8, 11, 4);</span><br><span class="line">    // 求和方式1</span><br><span class="line">    Optional&lt;Integer&gt; sum = list.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line">    // 求和方式2</span><br><span class="line">    Optional&lt;Integer&gt; sum2 = list.stream().reduce(Integer::sum);</span><br><span class="line">    // 求和方式3</span><br><span class="line">    Integer sum3 = list.stream().reduce(0, Integer::sum);      </span><br><span class="line">    // 求乘积</span><br><span class="line">    Optional&lt;Integer&gt; product = list.stream().reduce((x, y) -&gt; x * y);</span><br><span class="line">      </span><br><span class="line">    // 求最大值方式1</span><br><span class="line">    Optional&lt;Integer&gt; max = list.stream().reduce((x, y) -&gt; x &gt; y ? x : y);</span><br><span class="line">    // 求最大值写法2</span><br><span class="line">    Integer max2 = list.stream().reduce(1, Integer::max);</span><br><span class="line">      </span><br><span class="line">    System.out.println(&quot;list求和：&quot; + sum.get() + &quot;,&quot; + sum2.get() + &quot;,&quot; + sum3);</span><br><span class="line">    System.out.println(&quot;list求积：&quot; + product.get());</span><br><span class="line">    System.out.println(&quot;list求和：&quot; + max.get() + &quot;,&quot; + max2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void test16() &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">    personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">      </span><br><span class="line">    Integer sum = personList.stream().collect(Collectors.reducing(0, Person::getSalary, (i, j) -&gt; (i + j - 5000)));</span><br><span class="line">    System.out.println(&quot;员工扣税薪资总和：&quot; + sum);</span><br><span class="line">      </span><br><span class="line">    // stream的reduce</span><br><span class="line">    Optional&lt;Integer&gt; sum2 = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br><span class="line">    System.out.println(&quot;员工薪资总和：&quot; + sum2.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>归集（toList/toSet/toMap)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test12() &#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(1, 6, 3, 4, 6, 7, 9, 6, 20);</span><br><span class="line">    List&lt;Integer&gt; collect = list.stream().filter(l -&gt; l % 2 == 0).collect(Collectors.toList());</span><br><span class="line">    Set&lt;Integer&gt; collect1 = list.stream()</span><br><span class="line">    .filter(x -&gt; x % 2 == 0)</span><br><span class="line">        .filter(x -&gt; x % 4 == 0)</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">      </span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">    personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">      </span><br><span class="line">    Map&lt;?, ?&gt; personMap = personList.stream()</span><br><span class="line">    .filter(person -&gt; person.getSalary() &gt; 8000)</span><br><span class="line">    .collect(Collectors.toMap(Person::getName, p -&gt; p.getSalary()));</span><br><span class="line">    System.out.println(personMap);</span><br><span class="line">      </span><br><span class="line">    System.out.println(collect);</span><br><span class="line">    System.out.println(collect1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>统计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 统计：count/averaging</span><br><span class="line">    * Collectors:提供了一系列用于数据统计的静态方法：</span><br><span class="line">    * 计数：count</span><br><span class="line">    * 平均值：averagingInt、averagingLong、averagingDouble</span><br><span class="line">    * 最值：maxBy、minBy</span><br><span class="line">    * 求和：summingInt、summingLong、summingDouble</span><br><span class="line">    * 统计以上所有：summarizingInt、summarizingLong、summarizingDouble</span><br><span class="line">    */</span><br><span class="line">@Test</span><br><span class="line">public void test13() &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">    personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">    Long aLong = personList.stream().collect(Collectors.counting());</span><br><span class="line">    System.out.println(&quot;aLong: &quot; + aLong);</span><br><span class="line">    Double avgSalary = personList.stream().collect(Collectors.averagingDouble(p -&gt; p.getSalary()));</span><br><span class="line">    System.out.println(&quot;avgSalary: &quot; + avgSalary);</span><br><span class="line">    Optional&lt;Integer&gt; max = personList.stream()</span><br><span class="line">    .map(p -&gt; p.getSalary())</span><br><span class="line">    .collect(Collectors.maxBy(Integer::compare));</span><br><span class="line">    System.out.println(&quot;max: &quot; + max.get());</span><br><span class="line">    Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class="line">    System.out.println(&quot;sum: &quot; + sum);</span><br><span class="line">    DoubleSummaryStatistics sum2 = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));</span><br><span class="line">    System.out.println(&quot;sum2: &quot; + sum2);</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分组（partitioningBy/groupingBy）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test14() &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">    personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Jack&quot;, 7000, 22, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Lily&quot;, 7800, 32, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Anni&quot;, 8200, 33, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Owen&quot;, 9500, 35, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Alisa&quot;, 7900, 12, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">      </span><br><span class="line">    Map&lt;Boolean, List&lt;Person&gt;&gt; list = personList.stream().collect(Collectors.partitioningBy(x -&gt; x.getSalary() &gt; 8000));</span><br><span class="line">    System.out.println(list);</span><br><span class="line">      </span><br><span class="line">    Map&lt;String, List&lt;Person&gt;&gt; sex = personList.stream().collect(Collectors.groupingBy(Person::getSex));</span><br><span class="line">    System.out.println(&quot;sex: &quot; + sex);</span><br><span class="line">      </span><br><span class="line">    Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; collect =</span><br><span class="line">                      personList.stream()</span><br><span class="line">                      .collect(Collectors.groupingBy(p -&gt; p.getSex(), Collectors.groupingBy(x -&gt; x.getArea())));</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接合（joining）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test15() &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">    personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">    personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">      </span><br><span class="line">    String collect = personList.stream().map(p -&gt; p.getName()).collect(Collectors.joining(&quot;,&quot;));</span><br><span class="line">    System.out.println(&quot;name: &quot; + collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提取/聚合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test18() &#123;</span><br><span class="line">String[] arr1 = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;&#125;;</span><br><span class="line">    String[] arr2 = &#123;&quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;&#125;;</span><br><span class="line">    Stream&lt;String&gt; stream1 = Stream.of(arr1);</span><br><span class="line">    Stream&lt;String&gt; stream2 = Stream.of(arr2);</span><br><span class="line">    List&lt;String&gt; collect = Stream.concat(stream1, stream2)</span><br><span class="line">    .distinct()</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">      </span><br><span class="line">    List&lt;Integer&gt; integers = Stream.iterate(0, x -&gt; x + 2)</span><br><span class="line">    .limit(10)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">    System.out.println(integers);</span><br><span class="line">      </span><br><span class="line">    List&lt;Integer&gt; integerList = Stream.iterate(0, x -&gt; x + 2)</span><br><span class="line">    .skip(2)</span><br><span class="line">    .limit(10)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">    System.out.println(integerList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>遍历/递归</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">     public void test19() &#123;</span><br><span class="line">        //模拟从数据库查询出来</span><br><span class="line">        List&lt;Menu&gt; menus = Arrays.asList(</span><br><span class="line">                new Menu(1, &quot;根节点1&quot;, 0),</span><br><span class="line">                new Menu(2, &quot;子节点1&quot;, 1),</span><br><span class="line">                new Menu(3, &quot;子节点1.1&quot;, 2),</span><br><span class="line">                new Menu(4, &quot;子节点1.2&quot;, 2),</span><br><span class="line">                new Menu(5, &quot;根节点1.3&quot;, 2),</span><br><span class="line">                new Menu(6, &quot;根节点2&quot;, 1),</span><br><span class="line">                new Menu(7, &quot;根节点2.1&quot;, 6),</span><br><span class="line">                new Menu(8, &quot;根节点2.2&quot;, 6),</span><br><span class="line">                new Menu(9, &quot;根节点2.2.1&quot;, 7),</span><br><span class="line">                new Menu(10, &quot;根节点2.2.2&quot;, 7),</span><br><span class="line">                new Menu(11, &quot;根节点3&quot;, 1),</span><br><span class="line">                new Menu(12, &quot;根节点3.1&quot;, 11),</span><br><span class="line">                new Menu(13, &quot;根节点2&quot;, 0)</span><br><span class="line">        );</span><br><span class="line">        //获取父节点</span><br><span class="line">        List&lt;Menu&gt; collect = menus.stream().filter(m -&gt; m.getParentId() == 0).map(</span><br><span class="line">                (m) -&gt; &#123;</span><br><span class="line">                    m.setChildList(getChildrens(m, menus));</span><br><span class="line">                    return m;</span><br><span class="line">                &#125;</span><br><span class="line">        ).collect(Collectors.toList());</span><br><span class="line">        System.out.println(&quot;-------转json输出结果-------&quot;);</span><br><span class="line">        System.out.println(JSONUtil.parseArray(collect).toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">     * 递归查询子节点</span><br><span class="line">     *</span><br><span class="line">     * @param root 根节点</span><br><span class="line">     * @param all  所有节点</span><br><span class="line">     * @return 根节点信息</span><br><span class="line">     */</span><br><span class="line">    private List&lt;Menu&gt; getChildrens(Menu root, List&lt;Menu&gt; all) &#123;</span><br><span class="line">        List&lt;Menu&gt; children = all.stream().filter(m -&gt; &#123;</span><br><span class="line">            return Objects.equals(m.getParentId(), root.getId());</span><br><span class="line">        &#125;).map(</span><br><span class="line">                (m) -&gt; &#123;</span><br><span class="line">                    m.setChildList(getChildrens(m, all));</span><br><span class="line">                    return m;</span><br><span class="line">                &#125;</span><br><span class="line">        ).collect(Collectors.toList());</span><br><span class="line">        return children;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 高可用(主从配置)</title>
      <link href="2021/03/03/Nginx-%E9%AB%98%E5%8F%AF%E7%94%A8-%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"/>
      <url>2021/03/03/Nginx-%E9%AB%98%E5%8F%AF%E7%94%A8-%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li><p>准备</p><ul><li>在安装nginx的同时，需要安装keepalived</li><li>使用 yum 安装<ul><li>yum install keepalived -y</li><li>安装之后，在etc里面生成目录keepalived，有文件 keepalived.conf</li></ul></li></ul></li><li><p>完成高可用配置（主从配置）</p><ol><li><p>修改/etc/keepalived/keepalivec.conf 配置文件s</p><ul><li><pre><code class="nginx">global_defs &#123;    notification_email&#123;             acassen@firewall.loc             failover@firewall.loc             sysadmin@firewall.loc             &#125;     notification_email_from Alexandre.Cassen@firewall.loc     smtp_server 192.168.0.103 # 服务器ip地址     smtp_connect_timeout 30     router_id 192.168.0.103 # 服务器ip地址     &#125;vrrp_script chk_http_port &#123; # 检测nginx    script &quot;/usr/local/src/nginx_check.sh&quot;    interval 2#（检测脚本执行的间隔）    weight 2&#125;vrrp_instance VI_1 &#123;    state BACKUP #备份服务器上将MASTER改为BACKUP    interface ens33#网卡    virtual_router_id 51#主、备机的virtual_router_id必须相同    priority 90 #主、备机取不同的优先级，主机值较大，备份机值较小    advert_int 1    authentication &#123;        auth_type PASS        auth_pass 1111    &#125;    virtual_ipaddress &#123;        192.168.0.50 // VRRP H虚拟地址    &#125;&#125;</code></pre></li></ul></li></ol><p>3.把两台服务器上nginx和keepalived启动</p><ul><li>启动nginx：./nginx</li><li>启动keepalived：systemctl start keepalived.service</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 负载均衡</title>
      <link href="2021/03/03/Nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>2021/03/03/Nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<ol><li><p>负载均衡策略</p><ol><li><p>轮询（默认）</p><ul><li><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p></li><li><pre><code class="nginx">upstream edu&#123;    server 192.168.0.103:8080;    server 192.168.0.103:8081;&#125; server&#123;    listen    9002;    server_name    localhost;        location /&#123;            proxy_pass    http://edu;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. weight</span><br><span class="line"></span><br><span class="line">   - weight代表权重默认为1,权重越高被分配的客户端越多</span><br><span class="line"></span><br><span class="line">   - ```nginx</span><br><span class="line">     upstream edu&#123;</span><br><span class="line">         server 192.168.0.103:8080 weight=2;</span><br><span class="line">         server 192.168.0.103:8081 weight=4;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">     server&#123;</span><br><span class="line">         listen    9002;</span><br><span class="line">         server_name    localhost;</span><br><span class="line">         </span><br><span class="line">         location /&#123;</span><br><span class="line">                 proxy_pass    http://edu;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>ip_hash</p><ul><li><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器</p></li><li><pre><code class="nginx">upstream edu&#123;    ip_hash;    server 192.168.0.103:8080;    server 192.168.0.103:8081;&#125; server&#123;    listen    9002;    server_name    localhost;        location /&#123;            proxy_pass    http://edu;    &#125;&#125;</code></pre></li></ul></li><li><p>fair（第三方）</p><ul><li>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li></ul></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 反向代理</title>
      <link href="2021/03/03/Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>2021/03/03/Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> edu&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.103:8080</span>;  <span class="comment"># ip+端口</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span>    <span class="number">9002</span>;  <span class="comment">#监听的端口</span></span><br><span class="line">    <span class="attribute">server_name</span>    localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> /&#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>    http://edu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux apt 命令</title>
      <link href="2021/03/03/Linux-apt-%E5%91%BD%E4%BB%A4/"/>
      <url>2021/03/03/Linux-apt-%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装</p><ul><li>apt-get install PackageName // 普通安装</li><li>apt-get install PackageName=VersionName // 安装指定包的指定版</li><li>apt-get –reinstall install PackageName // 重新安装</li><li>apt-get build-dep PackageName // 安装源码包所需要的编译环境</li><li>apt-get -f install // 修复依赖关系</li><li>apt-get source PackageName // 下载软件包的源码</li></ul></li><li><p>卸载</p><ul><li><p>apt-get remove PackageName // 删除软件包, 保留配置文件</p></li><li><p>apt-get –purge remove PackageName // 删除软件包, 同时删除配置文件</p></li><li><p>apt-get purge PackageName // 删除软件包, 同时删除配置文件</p></li><li><p>apt-get autoremove PackageName // 删除软件包, 同时删除为满足依赖<br>// 而自动安装且不再使用的软件包</p></li><li><p>apt-get –purge autoremove PackageName // 删除软件包, 删除配置文件,<br>// 删除不再使用的依赖包</p></li><li><p>apt-get clean &amp;&amp; apt-get autoclean // 清除 已下载的软件包 和 旧软件包</p></li></ul></li><li><p>更新</p><ul><li><p>apt-get update // 更新安装源（Source）</p></li><li><p>apt-get upgrade // 更新已安装的软件包</p></li><li><p>apt-get dist-upgrade //更新已安装的软件包（识别并处理依赖关系的改变）</p></li></ul></li><li><p>查询</p><ul><li><p>dpkg -l // 列出已安装的所有软件包</p></li><li><p>apt-cache search PackageName // 搜索软件包</p></li><li><p>apt-cache show PackageName // 获取软件包的相关信息, 如说明、大小、版本等</p></li><li><p>apt-cache depends PackageName // 查看该软件包需要哪些依赖</p></li><li><p>apt-cache rdepends PackageName // 查看该软件包被哪些包依</p></li><li><p>apt-get check // 检查是否有损坏的依赖</p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> apt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装 Nginx</title>
      <link href="2021/03/03/Linux-%E5%AE%89%E8%A3%85-Nginx/"/>
      <url>2021/03/03/Linux-%E5%AE%89%E8%A3%85-Nginx/</url>
      
        <content type="html"><![CDATA[<ol><li>安装 gcc g++ 依赖库<ul><li>sudo apt-get install build-essential &amp;&amp; sudo apt-get install libtool</li></ul></li><li>安装pcre依赖库<ul><li>sudo apt-get install libpcre3 libpcre3-dev</li></ul></li><li>安装zlib依赖库<ul><li>sudo apt-get install zlib1g-dev</li></ul></li><li>安装ssl 依赖库<ul><li>sudo apt-get install openssl libssl-dev</li></ul></li><li>下载并解压安装包<ul><li>wget <a href="http://nginx.org/download/nginx-1.16.0.tar.gz">http://nginx.org/download/nginx-1.16.0.tar.gz</a></li><li>tar zxvf ./nginx-1.16.0.tar.gz</li></ul></li><li>进入解压目录<ul><li>cd nginx-1.16.0/ </li></ul></li><li>安装<ul><li>./configure –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module<ul><li> ./configure –prefix=安装路径</li></ul></li><li> sudo make</li><li> sudo make install</li></ul></li><li>启动<ul><li>/usr/local/nginx/sbin/nginx</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装 Node/NPM</title>
      <link href="2021/03/02/Linux-%E5%AE%89%E8%A3%85-Node-NPM/"/>
      <url>2021/03/02/Linux-%E5%AE%89%E8%A3%85-Node-NPM/</url>
      
        <content type="html"><![CDATA[<ol><li>下载<ol><li><a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></li></ol></li><li>解压<ol><li>tar -zxvf xxx.tar.gz</li></ol></li><li>全局使用 node/npm 创建链接<ul><li>sudo ln -s /usr/local/src/nodejs/bin/node /usr/local/bin/node</li><li>sudo ln -s /usr/local/src/nodejs/bin/npm /usr/local/bin/npm<ul><li>Tips: ln的功能是为某一个文件在另外一个位置建立一个同不的链接。具体用法是：ln -s 源文件 目标文件</li></ul></li></ul></li><li>测试是否安装成功<ol><li>node -v<ul><li>v14.15.0</li></ul></li><li>npm -v<ul><li>6.14.8</li></ul></li></ol></li><li>npm 切换镜像源<ol><li>检测是否镜像源<ul><li>npm info underscore<br><img src="https://gitee.com/JinWeiYang/pic-go/raw/master/img/image-20210302215306739.png" alt="image-20210302215306739"></li></ul></li><li>全局切换淘宝镜像源<ul><li>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li></ul></li><li>临时使用淘宝镜像源<ul><li>npm –registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> install xxx</li></ul></li><li>全局配置切换到官方源<ul><li>npm config set registry <a href="http://www.npmjs.org/">http://www.npmjs.org</a></li></ul></li></ol></li><li>淘宝镜像cnpm无法使用问题<ol><li>先卸载cnpm：npm uninstall -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li><li>注册一下镜像：npm set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li><li>解析一下node-gyp模块：npm set disturl <a href="https://npm.taobao.org/dist">https://npm.taobao.org/dist</a></li><li>清理下npm缓存：npm cache clean –force</li><li>重新安装：npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Node </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装 MySQL</title>
      <link href="2021/03/01/Linux-%E5%AE%89%E8%A3%85-MySQL/"/>
      <url>2021/03/01/Linux-%E5%AE%89%E8%A3%85-MySQL/</url>
      
        <content type="html"><![CDATA[<ul><li>规划</li></ul><p>安装文件下载目录：/data/software</p><p>Mysql目录安装位置：/usr/local/mysql</p><p>数据库保存位置：/data/mysql</p><p>日志保存位置：/data/log/mysql</p><ul><li>下载软件包</li></ul><p>mysql-5.7.16-linux-glibc2.5-x86_64.tar.gz</p><ul><li>解压安装包到 /usr/local 目录下</li></ul><p>sudo tar -zxvf /opt/mysql-5.7.16-linux-glibc2.5-x86_64.tar.gz -C /usr/local/</p><ul><li>重命名</li></ul><p>sudo mv mysql-5.7.16-osx10.11-x86_64 mysql</p><p>sudo mkdir -p /data/mysql</p><p>sudo mkdir -p /data/log/mysql</p><ul><li>检查mysql组和用户是否存在</li></ul><p>cat /etc/group | grep mysql</p><p>cat /etc/passwd | grep mysql</p><ul><li>新建mysql组和用户禁止登陆shell</li></ul><p>groupadd mysql</p><p>useradd -r  -g mysql mysql</p><p>–useradd -r参数表示mysql用户是系统用户，不可用于登陆系统</p><ul><li>修改/usr/local/mysql目录所属者</li></ul><p>chown -R mysql mysql/</p><p>chgrp -R mysql mysql/</p><ul><li>修改/data/mysql所属者</li></ul><p>chown -R mysql /data/mysql</p><ul><li>执行 scripts 目录下的 mysql_install_db 脚本完成一些默认的初始化(创建默认配置文件、授权表等)</li></ul><p>cd /usr/local/mysql</p><p>sudo scripts/mysql_install_db –user=mysql</p><p>注意: MySQL 5.7.6 以上版本取消了 scripts 目录, 初始化命令改成了 sudo bin/mysqld –initialize –user=mysql –basedir=/usr/local/mysql –datadir=/data/mysql</p><p>此处会生成临时密码（ic1OwqjIhK:m）</p><p>/bin/mysql_ssl_rsa_setup –datadir=/data/mysql</p><ul><li>修改系统配置文件</li></ul><p>cd /usr/local/mysql/support-files</p><p>cp my-default.cnf /etc/my.cnf</p><p>cp mysql.server /etc/init.d/mysql</p><p>vim /etc/init.d/mysql</p><p>修改以下内容：</p><p>basedir=/usr/local/mysql</p><p>datadir=/data/mysql</p><ul><li>安装完成, 测试启动、重启与停止</li></ul><p># 启动 </p><p>/etc/init.d/mysql start</p><p># 登陆</p><p>mysql -hlocalhost -uroot -p</p><p>注:   -如果出现：-bash: mysql: command not found</p><p>　　          -就执行： # ln -s /usr/local/mysql/bin/mysql /usr/bin –没有出现就不用执行</p><p>–输入第6步生成的临时密码</p><p>–修改密码</p><p>mysql&gt; set password=password(‘123456’);</p><p>–设置root账户的host地址（修改了才可以远程连接）</p><p>mysql&gt;GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’ IDENTIFIED BY ‘123@asdf’ WITH GRANT OPTION;</p><p>mysql&gt;flush privileges;</p><p># 重启 </p><p>/etc/init.d/mysql restart </p><p>service mysql restart</p><p>service mysql start</p><p># 停止 </p><p>/etc/init.d/mysql stop </p><p># 检查 MySQL 运行状态 </p><p>/etc/init.d/mysql status</p><ul><li>修改初始化密码</li></ul><p>sudo /usr/local/mysql/bin/mysqladmin -hlocalhost -uroot -pic1OwqjIhK:m password 123456</p><ul><li>通过自带的 MySQL Client 连接数据库</li></ul><p>/usr/local/mysql/bin/mysql -uroot -p123456</p><p>配置my.cnf</p><p>[client]<br>default-character-set=utf8</p><p>[mysqld]<br>basedir=/usr/local/mysql-5.7.31<br>datadir=/data/mysql<br>socket=/tmp/mysql.sock<br>log-error=/data/mysql/mysql.err<br>pid-file=/data/mysql/mysql.pid<br>character-set-server=utf8<br>default-storage-engine=INNODB</p><ol><li>查看mysql 运行状态<ul><li>service mysql status</li></ul></li><li>启动<ul><li>service mysql start</li></ul></li><li>关闭<ul><li>service mysql stop</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
